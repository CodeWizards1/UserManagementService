// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: GardenManagementService/gardenManagementService.proto

package GardenManagementService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GardenManagementService_DoesGardenExist_FullMethodName        = "/GardenManagementService.GardenManagementService/DoesGardenExist"
	GardenManagementService_CreateGarden_FullMethodName           = "/GardenManagementService.GardenManagementService/CreateGarden"
	GardenManagementService_GetGardenByID_FullMethodName          = "/GardenManagementService.GardenManagementService/GetGardenByID"
	GardenManagementService_UpdateGardenByID_FullMethodName       = "/GardenManagementService.GardenManagementService/UpdateGardenByID"
	GardenManagementService_DeleteGardenByID_FullMethodName       = "/GardenManagementService.GardenManagementService/DeleteGardenByID"
	GardenManagementService_GetGardensByUserID_FullMethodName     = "/GardenManagementService.GardenManagementService/GetGardensByUserID"
	GardenManagementService_CreatePlantByGardenID_FullMethodName  = "/GardenManagementService.GardenManagementService/CreatePlantByGardenID"
	GardenManagementService_GetPlantsByGardenID_FullMethodName    = "/GardenManagementService.GardenManagementService/GetPlantsByGardenID"
	GardenManagementService_UpdatePlantByPlantsID_FullMethodName  = "/GardenManagementService.GardenManagementService/UpdatePlantByPlantsID"
	GardenManagementService_DeletePlantByPlantsID_FullMethodName  = "/GardenManagementService.GardenManagementService/DeletePlantByPlantsID"
	GardenManagementService_CreateCareLogByPlantID_FullMethodName = "/GardenManagementService.GardenManagementService/CreateCareLogByPlantID"
	GardenManagementService_GetCareLogsByPlantID_FullMethodName   = "/GardenManagementService.GardenManagementService/GetCareLogsByPlantID"
)

// GardenManagementServiceClient is the client API for GardenManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GardenManagementServiceClient interface {
	DoesGardenExist(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DoesGardenExistResponse, error)
	// 1
	CreateGarden(ctx context.Context, in *GardenRequest, opts ...grpc.CallOption) (*GardenResponse, error)
	// 2
	GetGardenByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GardenResponse, error)
	// 3
	UpdateGardenByID(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*GardenResponse, error)
	// 4
	DeleteGardenByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DateResponse, error)
	// 5
	GetGardensByUserID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Gardens, error)
	// 6
	CreatePlantByGardenID(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*PlantResponse, error)
	// 7
	GetPlantsByGardenID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Plants, error)
	// 8
	UpdatePlantByPlantsID(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*PlantResponse, error)
	// 9
	DeletePlantByPlantsID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DateResponse, error)
	// 10
	CreateCareLogByPlantID(ctx context.Context, in *CareLogs, opts ...grpc.CallOption) (*CareLogsResponse, error)
	// 11
	GetCareLogsByPlantID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CareLogsByPlantID, error)
}

type gardenManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGardenManagementServiceClient(cc grpc.ClientConnInterface) GardenManagementServiceClient {
	return &gardenManagementServiceClient{cc}
}

func (c *gardenManagementServiceClient) DoesGardenExist(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DoesGardenExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoesGardenExistResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_DoesGardenExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) CreateGarden(ctx context.Context, in *GardenRequest, opts ...grpc.CallOption) (*GardenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GardenResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_CreateGarden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) GetGardenByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GardenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GardenResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_GetGardenByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) UpdateGardenByID(ctx context.Context, in *UpdateGardenRequest, opts ...grpc.CallOption) (*GardenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GardenResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_UpdateGardenByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) DeleteGardenByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_DeleteGardenByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) GetGardensByUserID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Gardens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Gardens)
	err := c.cc.Invoke(ctx, GardenManagementService_GetGardensByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) CreatePlantByGardenID(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*PlantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlantResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_CreatePlantByGardenID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) GetPlantsByGardenID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Plants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plants)
	err := c.cc.Invoke(ctx, GardenManagementService_GetPlantsByGardenID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) UpdatePlantByPlantsID(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*PlantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlantResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_UpdatePlantByPlantsID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) DeletePlantByPlantsID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*DateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_DeletePlantByPlantsID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) CreateCareLogByPlantID(ctx context.Context, in *CareLogs, opts ...grpc.CallOption) (*CareLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CareLogsResponse)
	err := c.cc.Invoke(ctx, GardenManagementService_CreateCareLogByPlantID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenManagementServiceClient) GetCareLogsByPlantID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CareLogsByPlantID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CareLogsByPlantID)
	err := c.cc.Invoke(ctx, GardenManagementService_GetCareLogsByPlantID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GardenManagementServiceServer is the server API for GardenManagementService service.
// All implementations must embed UnimplementedGardenManagementServiceServer
// for forward compatibility
type GardenManagementServiceServer interface {
	DoesGardenExist(context.Context, *IdRequest) (*DoesGardenExistResponse, error)
	// 1
	CreateGarden(context.Context, *GardenRequest) (*GardenResponse, error)
	// 2
	GetGardenByID(context.Context, *IdRequest) (*GardenResponse, error)
	// 3
	UpdateGardenByID(context.Context, *UpdateGardenRequest) (*GardenResponse, error)
	// 4
	DeleteGardenByID(context.Context, *IdRequest) (*DateResponse, error)
	// 5
	GetGardensByUserID(context.Context, *IdRequest) (*Gardens, error)
	// 6
	CreatePlantByGardenID(context.Context, *PlantRequest) (*PlantResponse, error)
	// 7
	GetPlantsByGardenID(context.Context, *IdRequest) (*Plants, error)
	// 8
	UpdatePlantByPlantsID(context.Context, *PlantRequest) (*PlantResponse, error)
	// 9
	DeletePlantByPlantsID(context.Context, *IdRequest) (*DateResponse, error)
	// 10
	CreateCareLogByPlantID(context.Context, *CareLogs) (*CareLogsResponse, error)
	// 11
	GetCareLogsByPlantID(context.Context, *IdRequest) (*CareLogsByPlantID, error)
	mustEmbedUnimplementedGardenManagementServiceServer()
}

// UnimplementedGardenManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGardenManagementServiceServer struct {
}

func (UnimplementedGardenManagementServiceServer) DoesGardenExist(context.Context, *IdRequest) (*DoesGardenExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesGardenExist not implemented")
}
func (UnimplementedGardenManagementServiceServer) CreateGarden(context.Context, *GardenRequest) (*GardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGarden not implemented")
}
func (UnimplementedGardenManagementServiceServer) GetGardenByID(context.Context, *IdRequest) (*GardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGardenByID not implemented")
}
func (UnimplementedGardenManagementServiceServer) UpdateGardenByID(context.Context, *UpdateGardenRequest) (*GardenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGardenByID not implemented")
}
func (UnimplementedGardenManagementServiceServer) DeleteGardenByID(context.Context, *IdRequest) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGardenByID not implemented")
}
func (UnimplementedGardenManagementServiceServer) GetGardensByUserID(context.Context, *IdRequest) (*Gardens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGardensByUserID not implemented")
}
func (UnimplementedGardenManagementServiceServer) CreatePlantByGardenID(context.Context, *PlantRequest) (*PlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlantByGardenID not implemented")
}
func (UnimplementedGardenManagementServiceServer) GetPlantsByGardenID(context.Context, *IdRequest) (*Plants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantsByGardenID not implemented")
}
func (UnimplementedGardenManagementServiceServer) UpdatePlantByPlantsID(context.Context, *PlantRequest) (*PlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlantByPlantsID not implemented")
}
func (UnimplementedGardenManagementServiceServer) DeletePlantByPlantsID(context.Context, *IdRequest) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlantByPlantsID not implemented")
}
func (UnimplementedGardenManagementServiceServer) CreateCareLogByPlantID(context.Context, *CareLogs) (*CareLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCareLogByPlantID not implemented")
}
func (UnimplementedGardenManagementServiceServer) GetCareLogsByPlantID(context.Context, *IdRequest) (*CareLogsByPlantID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCareLogsByPlantID not implemented")
}
func (UnimplementedGardenManagementServiceServer) mustEmbedUnimplementedGardenManagementServiceServer() {
}

// UnsafeGardenManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GardenManagementServiceServer will
// result in compilation errors.
type UnsafeGardenManagementServiceServer interface {
	mustEmbedUnimplementedGardenManagementServiceServer()
}

func RegisterGardenManagementServiceServer(s grpc.ServiceRegistrar, srv GardenManagementServiceServer) {
	s.RegisterService(&GardenManagementService_ServiceDesc, srv)
}

func _GardenManagementService_DoesGardenExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).DoesGardenExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_DoesGardenExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).DoesGardenExist(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_CreateGarden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).CreateGarden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_CreateGarden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).CreateGarden(ctx, req.(*GardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_GetGardenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).GetGardenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_GetGardenByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).GetGardenByID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_UpdateGardenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGardenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).UpdateGardenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_UpdateGardenByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).UpdateGardenByID(ctx, req.(*UpdateGardenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_DeleteGardenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).DeleteGardenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_DeleteGardenByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).DeleteGardenByID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_GetGardensByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).GetGardensByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_GetGardensByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).GetGardensByUserID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_CreatePlantByGardenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).CreatePlantByGardenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_CreatePlantByGardenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).CreatePlantByGardenID(ctx, req.(*PlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_GetPlantsByGardenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).GetPlantsByGardenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_GetPlantsByGardenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).GetPlantsByGardenID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_UpdatePlantByPlantsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).UpdatePlantByPlantsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_UpdatePlantByPlantsID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).UpdatePlantByPlantsID(ctx, req.(*PlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_DeletePlantByPlantsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).DeletePlantByPlantsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_DeletePlantByPlantsID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).DeletePlantByPlantsID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_CreateCareLogByPlantID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CareLogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).CreateCareLogByPlantID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_CreateCareLogByPlantID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).CreateCareLogByPlantID(ctx, req.(*CareLogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenManagementService_GetCareLogsByPlantID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenManagementServiceServer).GetCareLogsByPlantID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenManagementService_GetCareLogsByPlantID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenManagementServiceServer).GetCareLogsByPlantID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GardenManagementService_ServiceDesc is the grpc.ServiceDesc for GardenManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GardenManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GardenManagementService.GardenManagementService",
	HandlerType: (*GardenManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoesGardenExist",
			Handler:    _GardenManagementService_DoesGardenExist_Handler,
		},
		{
			MethodName: "CreateGarden",
			Handler:    _GardenManagementService_CreateGarden_Handler,
		},
		{
			MethodName: "GetGardenByID",
			Handler:    _GardenManagementService_GetGardenByID_Handler,
		},
		{
			MethodName: "UpdateGardenByID",
			Handler:    _GardenManagementService_UpdateGardenByID_Handler,
		},
		{
			MethodName: "DeleteGardenByID",
			Handler:    _GardenManagementService_DeleteGardenByID_Handler,
		},
		{
			MethodName: "GetGardensByUserID",
			Handler:    _GardenManagementService_GetGardensByUserID_Handler,
		},
		{
			MethodName: "CreatePlantByGardenID",
			Handler:    _GardenManagementService_CreatePlantByGardenID_Handler,
		},
		{
			MethodName: "GetPlantsByGardenID",
			Handler:    _GardenManagementService_GetPlantsByGardenID_Handler,
		},
		{
			MethodName: "UpdatePlantByPlantsID",
			Handler:    _GardenManagementService_UpdatePlantByPlantsID_Handler,
		},
		{
			MethodName: "DeletePlantByPlantsID",
			Handler:    _GardenManagementService_DeletePlantByPlantsID_Handler,
		},
		{
			MethodName: "CreateCareLogByPlantID",
			Handler:    _GardenManagementService_CreateCareLogByPlantID_Handler,
		},
		{
			MethodName: "GetCareLogsByPlantID",
			Handler:    _GardenManagementService_GetCareLogsByPlantID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GardenManagementService/gardenManagementService.proto",
}
